from common import notify_error, log_api_call
from jarvis_mcmc import fibonacci_calc
from flask import Flask
from flask import jsonify
from flask import redirect
from flask import request
import logging
from logging.handlers import RotatingFileHandler


app = Flask("Jarvis-MCMC")

HTTP_ERROR_CLIENT = 403
HTTP_ERROR_SERVER = 500

@app.route('/', methods=['GET'])
def index():
    """
    function: index
    params:   none
    notes:    redirects to the documentation.
    """
    return redirect("/static/index.html")

@log_api_call
@app.route('/jarvis_mcmc/sim/', methods=['GET'])
def sim_no_box_api():
    """
    function: jarvis_mcmc_sim_api

    params: none? should be box name?

    returns: flask response error object indicating that a box must be specified

    pre-requisites: none
    """

    return notify_error("ERR_INVALID:  The box must be specified as sim/foo-box", HTTP_ERROR_CLIENT)


@log_api_call
@app.route('/jarvis_mcmc/sim/<box>', methods=['GET'])
def sim_api(box):
    """
    function: jarvis_mcmc_sim_api

    params: none? should be box name?

    returns: flask response object suitable for return to the client. May be an error or a valid successful reply.

    pre-requisites: GET request requires the 'box' parameter indicating which box is requesting
    """

    # if 'box' not in request.args or request.args['box'] in ("", None):
    #     return notify_error("ERR_NO_ARG:  'box' argument required to /jarvis_mcmc/sim", HTTP_ERROR_CLIENT)

    # try:
    #     box = request.args.get('box', '')
    # except:
    #     return notify_error("ERR_INVALID_TYPE:  'box' parameter must be a string", HTTP_ERROR_CLIENT)

    try:
        return jsonify(box=box, id=1, dataset="foo.RData", model="foo.model", n=1000, max_cores=4, 
                   iter=2000, chains=4, results_path="foo/bar")
    except Exception as ex:
        return notify_error(ex, HTTP_ERROR_SERVER)

@log_api_call
@app.route('/jarvis_mcmc/list', methods=['GET'])
def jarvis_mcmc_list_api():
    """
    function:  jarvis_mcmc_list_api

    params:    none

    returns:   flask response object suitable for return to the client.  May be an error or a valid successful reply.

    pre-requisites:  GET request requires a 'count' parameter that is parsable as a long and greater than zero.

    """
    if 'count' not in request.args or request.args['count'] in ("", None):
        return notify_error("ERR_NO_ARG:  'count' argument required to /jarvis_mcmc/list", HTTP_ERROR_CLIENT)

    try:
        count = long(request.args.get('count', ''))
    except:
        return notify_error("ERR_INVALID_TYPE:  'count' parameter must be an integer", HTTP_ERROR_CLIENT)

    if count < 0:
        return notify_error("ERR_OUT_OF_BOUNDS:  'count' parameter must be a postitive integer", HTTP_ERROR_CLIENT)

    try:
        return jsonify(answer=fibonacci_calc(count))
    except Exception as ex:
        return notify_error(ex, HTTP_ERROR_SERVER)


@log_api_call
@app.route('/jarvis_mcmc/docs', methods=['GET'])
def jarvis_mcmc_docs():
    """
    function:   jarvis_mcmc_docs

    params:     none

    returns:    redirect response to the actual docs, generated via makefile and placed in the static directory.

    notes:      The documentation is generated by Sphinx via make
                >  cd ./docs
                >  make html
                Documentation is now available as HTML in the "static" directory.
    """
    return redirect("/static/index.html")


if __name__ == '__main__':
    app.run()
